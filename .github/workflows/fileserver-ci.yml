name: FileServer CI/CD

on:
  workflow_call:
    inputs:
      repo_path:
        required: true
        type: string
        default: 'devoirsitech-fileserver'
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  quality-gate:
    name: FileServer Quality Gate
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      security-events: write
      actions: read
    
    # SQL Server temporairement d√©sactiv√© (pas encore utilis√© dans le code)
    # services:
    #   sqlserver:
    #     image: mcr.microsoft.com/mssql/server:2022-latest
    #     env:
    #       MSSQL_SA_PASSWORD: "TempCIPassword123!"
    #       ACCEPT_EULA: "Y"
    #       MSSQL_PID: "Express"
    #     ports:
    #       - 1433:1433
    #     options: >-
    #       --health-cmd="/opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P TempCIPassword123! -C -Q 'SELECT 1'"
    #       --health-interval=30s
    #       --health-timeout=20s
    #       --health-retries=10
    #       --health-start-period=90s

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        repository: DevoirsiTech/${{ inputs.repo_path }}
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    # √âtape SQL Server d√©sactiv√©e temporairement
    # - name: Wait for SQL Server to be ready
    #   run: |
    #     echo "SQL Server setup disabled - not yet needed by FileServer"
    #     # D√©commenter quand Entity Framework sera activ√© dans Program.cs

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: 17
        distribution: 'zulu'

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Cache SonarCloud packages
      uses: actions/cache@v4
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar

    - name: Cache SonarCloud scanner
      id: cache-sonar-scanner
      uses: actions/cache@v4
      with:
        path: ./.sonar/scanner
        key: ${{ runner.os }}-sonar-scanner
        restore-keys: ${{ runner.os }}-sonar-scanner

    - name: Install SonarCloud scanner
      if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
      run: |
        mkdir -p ./.sonar/scanner
        dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner

    - name: Restore dependencies
      run: dotnet restore

    - name: Format check
      run: dotnet format --verify-no-changes --verbosity diagnostic

    - name: Build and analyze with SonarCloud
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        ./.sonar/scanner/dotnet-sonarscanner begin /k:"DevoirsiTech_devoirsitech-fileserver" /o:"devoirsitech" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.cs.opencover.reportsPaths="coverage/**/coverage.opencover.xml"
        dotnet build --no-restore --configuration Release
        dotnet test --no-build --configuration Release --collect:"XPlat Code Coverage" --results-directory ./coverage
        ./.sonar/scanner/dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

    # Analyse de s√©curit√© statique (optionnel - peut √™tre d√©sactiv√© si non requis)
    - name: Install Security Code Scan
      run: dotnet tool install --global security-code-scan.tool || true
      continue-on-error: true
      
    - name: Run Security Code Scan
      run: security-code-scan . || true
      continue-on-error: true

    # Security scan with Snyk (optionnel - n√©cessite SNYK_TOKEN)
    # - name: Run Snyk to check for vulnerabilities
    #   uses: snyk/actions/dotnet@master
    #   continue-on-error: true
    #   env:
    #     SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
    #   with:
    #     args: --severity-threshold=high

  trigger-docs:
    name: Trigger Documentation Update
    needs: quality-gate
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: üìö Trigger documentation generation
      uses: peter-evans/repository-dispatch@v2
      with:
        token: ${{ secrets.DOCS_TOKEN }}
        repository: DevoirsiTech/.github
        event-type: docs-update
        client-payload: '{"project": "fileserver", "ref": "${{ github.sha }}"}'
