name: Frontend CI/CD

on:
  workflow_call:
    inputs:
      repo_path:
        required: true
        type: string
        default: 'devoirsitech-frontend'
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  quality-gate:
    name: Frontend Quality Gate
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      security-events: write
      actions: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        repository: DevoirsiTech/${{ inputs.repo_path }}
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: 'package-lock.json'

    - name: Install dependencies
      run: npm ci

    - name: Type check
      run: npm run type-check

    - name: Lint check
      run: npm run lint

    - name: Format check
      run: |
        if ! npm run format:check; then
          echo "‚ùå Code formatting issues detected!"
          echo "Please run 'npm run format:write' locally and commit the changes."
          exit 1
        fi

    - name: Build
      run: npm run build

    - name: Test
      run: npm run test:coverage
      env:
        CI: true

    # Analyse de s√©curit√© statique avec ESLint Security
    - name: Run ESLint Security Analysis
      run: |
        npm install --save-dev eslint-plugin-security || true
        npx eslint . --ext .js,.jsx,.ts,.tsx || true
      continue-on-error: true

    # Audit de s√©curit√© (gratuit)
    - name: Run npm audit
      run: npm audit --audit-level high

    # Snyk (gratuit pour projets open source)
    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

    # SonarCloud Scan
    - name: SonarCloud Scan
      uses: SonarSource/sonarqube-scan-action@v5
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          repository: DevoirsiTech/${{ inputs.repo_path }}
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          config-file: './.github/dependency-review-config.yml'

  trigger-docs:
    name: Trigger Documentation Update
    needs: quality-gate
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: üìö Trigger documentation generation
      uses: peter-evans/repository-dispatch@v2
      with:
        token: ${{ secrets.DOCS_TOKEN }}
        repository: DevoirsiTech/.github
        event-type: docs-update
        client-payload: '{"project": "frontend", "ref": "${{ github.sha }}"}'
