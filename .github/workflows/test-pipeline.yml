name: Test Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Restore dependencies
      run: dotnet restore devoirsitech-backend/
    
    - name: Build
      run: dotnet build devoirsitech-backend/ --no-restore
    
    - name: Run unit tests
      run: dotnet test devoirsitech-backend/ --no-build --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        directory: ./coverage
        fail_ci_if_error: true

  test-fileserver:
    name: Test FileServer
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Restore dependencies
      run: dotnet restore devoirsitech-fileserver/
    
    - name: Build
      run: dotnet build devoirsitech-fileserver/ --no-restore
    
    - name: Run unit tests
      run: dotnet test devoirsitech-fileserver/ --no-build --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        directory: ./coverage
        fail_ci_if_error: true

  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: devoirsitech-frontend/package-lock.json
    
    - name: Install dependencies
      run: npm ci
      working-directory: devoirsitech-frontend
    
    - name: Run linting
      run: npm run lint
      working-directory: devoirsitech-frontend
    
    - name: Run type checking
      run: npm run type-check
      working-directory: devoirsitech-frontend
    
    - name: Run unit tests
      run: npm run test:coverage
      working-directory: devoirsitech-frontend
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        directory: ./devoirsitech-frontend/coverage
        fail_ci_if_error: true

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test-backend, test-fileserver, test-frontend]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Start services with Docker Compose
      run: |
        cd devoirsitech-infra
        docker compose up -d
        sleep 30
    
    - name: Wait for services to be ready
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:8080; do sleep 2; done'
        timeout 60 bash -c 'until curl -H "Host: api.localhost" http://localhost:80/api/health; do sleep 2; done'
        timeout 60 bash -c 'until curl -H "Host: files.localhost" http://localhost:80/api/health; do sleep 2; done'
        timeout 60 bash -c 'until curl -H "Host: app.localhost" http://localhost:80; do sleep 2; done'
    
    - name: Setup .NET for integration tests
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Run backend integration tests
      run: dotnet test devoirsitech-backend/ --filter Category=Integration --verbosity normal
    
    - name: Run fileserver integration tests
      run: dotnet test devoirsitech-fileserver/ --filter Category=Integration --verbosity normal
    
    - name: Show service logs on failure
      if: failure()
      run: |
        cd devoirsitech-infra
        docker compose logs

  sonarqube-analysis:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    needs: [test-backend, test-fileserver, test-frontend]
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: SonarQube Scan
      uses: sonarqube-quality-gate-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
